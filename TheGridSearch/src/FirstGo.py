'''
Solving "The Grid Search" puzzle on hackerrank.

https://www.hackerrank.com/challenges/the-grid-search

---------------------

Problem Statement

Given a 2D array of digits, try to find the location of a given 2D pattern of digits. For example, consider the following 2D matrix:

1234567890  
0987654321  
1111111111  
1111111111  
2222222222  
Assume we need to look for the following 2D pattern:

876543  
111111  
111111
If we scan through the original array, we observe that the 2D pattern begins at the second row and the third column of the larger grid (the 8 in the second row and third column of the larger grid is the top-left corner of the pattern we are searching for).

So, a 2D pattern of P digits is said to be present in a larger grid G, if the latter contains a contiguous, rectangular 2D grid of digits matching with the pattern P, similar to the example shown above.

Input Format 
The first line contains an integer, T, which is the number of test cases. T test cases follow, each having a structure as described below: 
The first line contains two space-separated integers, R and C, indicating the number of rows and columns in the grid G, respectively. 
This is followed by R lines, each with a string of C digits, which represent the grid G. 
The following line contains two space-separated integers, r and c, indicating the number of rows and columns in the pattern grid P. 
This is followed by r lines, each with a string of c digits, which represent the pattern P.

Constraints 
1<=T<=5 
1<=R,r,C,c<=1000 
1<=r<=R 
1<=c<=C
Test Case Generation 
Each individual test case has been generated by first specifying the size (R and C) of the large 2D matrix, and then randomly generating the digits in it. A limited number of digits in the larger matrix may be changed by the problem setter (no more than 5% of the total number of digits in the matrix). So the larger 2D matrix is almost-random. The pattern matrix has been manually-curated by the problem setter.

Output Format 
Display 'YES' or 'NO', depending on whether (or not) you find that the larger grid G contains the rectangular pattern P. The evaluation will be case sensitive.

---------------------

There was an issue between my computer and the hackerrank test server -
without the ".strip()" after those "raw_inputs()", there are some 
strange characters that bleed in. It wasn't true of all test cases,
and I couldn't replicate it here. But anyways, strip fixes it.

Created on 30 Dec 2015

@author: chris
'''

for _ in range(input()):
    R, _ = map(int, raw_input().split())
    
    grid = []
    for _ in range(R):
        grid.append(raw_input().strip())
    
    r, _ = map(int, raw_input().split())
    
    patt = []
    for _ in range(r):
        patt.append(raw_input().strip())
    
    # Finding the matching first row and column
    
    pattFirstRow = patt[0]
    firstCoords = []
    for i, gridRow in enumerate(grid[:-len(patt)+1]):
        try:
            startColSearch = 0
            while True:
                colStart = gridRow.index(pattFirstRow, startColSearch)
                firstCoords.append([i,colStart])
                startColSearch = colStart + 1
            
        except(ValueError):
            pass
    
    # From these coords, checking the rest of the pattern matches
    
    found = False
    for row, col in firstCoords:
        for j, pattRow in enumerate(patt[1:]):
            addRow = j + 1
            found = grid[row + addRow][col : col + len(pattRow)] == pattRow
            if not found:
                break
        if found:
            break
    
    if found:
        print 'YES'
    else:
        print 'NO'
#     
